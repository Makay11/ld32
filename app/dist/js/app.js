// Generated by CoffeeScript 1.9.2
var Player, defer;

defer = function(f) {
  return setTimeout(function() {
    return f();
  });
};

Player = (function() {
  function Player() {
    this.width = 1;
    this.height = 1.5;
    this.geometry = new THREE.PlaneBufferGeometry(this.width, this.height);
    this.material = new THREE.MeshBasicMaterial({
      color: 0xff0000,
      side: THREE.DoubleSide
    });
    this.mesh = new THREE.Mesh(this.geometry, this.material);
    this.mesh.position.z = this.height / 2;
    this.mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI / 2);
    this.position = 0;
    this.moving = false;
    this.movementSpeed = 1 / 250;
  }

  Player.prototype.moveLeft = function() {
    if (this.moving) {
      return;
    }
    if (this.position > -1) {
      return this.moving = "left";
    }
  };

  Player.prototype.moveRight = function() {
    if (this.moving) {
      return;
    }
    if (this.position < 1) {
      return this.moving = "right";
    }
  };

  Player.prototype.update = function(delta) {
    if (this.moving) {
      if (this.moving === "left") {
        this.mesh.position.x -= this.movementSpeed * delta;
        if (this.mesh.position.x <= this.position - 2) {
          this.position = this.position - 2;
          this.mesh.position.x = this.position;
          return this.moving = false;
        }
      } else if (this.moving === "right") {
        this.mesh.position.x += this.movementSpeed * delta;
        if (this.mesh.position.x >= this.position + 2) {
          this.position = this.position + 2;
          this.mesh.position.x = this.position;
          return this.moving = false;
        }
      }
    }
  };

  return Player;

})();

defer(function() {
  var camera, gameLoop, geometry, height, keyboard, material, plane, player, previousTime, render, renderer, scene, update, wasPressed, width;
  renderer = new THREE.WebGLRenderer();
  width = window.innerWidth;
  height = window.innerHeight;
  renderer.setSize(width, height - 4);
  $("body").append(renderer.domElement);
  camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
  camera.position.y = -2.5;
  camera.position.z = 2;
  camera.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI / 2.2);
  $(window).on("resize", function() {
    width = window.innerWidth;
    height = window.innerHeight;
    renderer.setSize(width, height - 4);
    camera.aspect = width / height;
    return camera.updateProjectionMatrix();
  });
  scene = new THREE.Scene();
  geometry = new THREE.PlaneBufferGeometry(6, 1000);
  material = new THREE.MeshBasicMaterial({
    color: 0xffff00,
    side: THREE.DoubleSide
  });
  plane = new THREE.Mesh(geometry, material);
  scene.add(plane);
  player = new Player();
  scene.add(player.mesh);
  keyboard = new THREEx.KeyboardState();
  wasPressed = {
    left: false,
    right: false
  };
  update = function(delta) {
    var left, right;
    if (left = keyboard.pressed("left")) {
      if (!wasPressed.left && !player.moving) {
        player.moveLeft();
      }
    }
    wasPressed.left = left;
    if (right = keyboard.pressed("right")) {
      if (!wasPressed.right && !player.moving) {
        player.moveRight();
      }
    }
    wasPressed.right = right;
    return player.update(delta);
  };
  render = function() {
    return renderer.render(scene, camera);
  };
  previousTime = 0;
  gameLoop = function(time) {
    var delta;
    requestAnimationFrame(gameLoop);
    delta = time - previousTime;
    update(delta);
    return render();
  };
  return gameLoop();
});
